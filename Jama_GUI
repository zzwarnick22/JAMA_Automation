# Created by Zachary Warnick 

import tkinter as tk
import requests
import json
import paramiko 
import sqlite3
import getpass
from requests.auth import HTTPBasicAuth
from tkinter import messagebox
from selenium import webdriver 
from selenium.webdriver.common.by import By 
from selenium.webdriver.common.keys import Keys 
from selenium.webdriver.common.action_chains import ActionChains 
from selenium.webdriver.support.ui import WebDriverWait 
from selenium.webdriver.support import expected_conditions as EC 
from sqlite3 import Error

# Function to fetch test case details from JAMA
def fetch_test_case(jama_url, username, api_token, test_case_id):
    url = f"{jama_url}/rest/latest/items/{test_case_id}"
    auth = HTTPBasicAuth(username, api_token)
    headers = {
        "Accept": "application/json",
        "Content-Type": "application/json"
    }
    
    response = requests.get(url, headers=headers, auth=auth)
    
    if response.status_code == 200:
        return response.json()
    else:
        messagebox.showerror("Error", f"Failed to fetch test case: {response.status_code}\n{response.text}")
        return None

# Function to execute test steps
def execute_test_steps(test_steps):
    for step in test_steps:
        action = step['fields']['action']
        expected_result = step['fields']['expectedResult']
        
        print(f"Executing step: {action}")

# Function to allow SSO

def select_sso_option(url, sso_button_selector):
    # Initialize the WebDriver (e.g., Chrome)
    driver = webdriver.Chrome()  # Ensure chromedriver is in your PATH or provide the path to chromedriver

    try:
        # Navigate to the webpage
        driver.get(url)

        # Wait for the SSO button to be clickable
        wait = WebDriverWait(driver, 10)
        sso_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, sso_button_selector)))

        # Click the SSO button
        sso_button.click()

        # Optionally, handle the SSO login process here
        # For example, you might need to enter a username and password, or handle a redirect

        # Wait for the login process to complete (this will vary based on the SSO implementation)
        # Example: wait for a specific element to be present after login
        # wait.until(EC.presence_of_element_located((By.ID, "some_element_id_after_login")))

        print("SSO login process initiated successfully.")

    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Close the WebDriver
        driver.quit()

# Example usage
if __name__ == "__main__":
    url = "google.com"  # Replace with the URL of the login page
    sso_button_selector = "button.sso-login"  # Replace with the CSS selector of the SSO button

    select_sso_option(url, sso_button_selector)

def ssh_connect_and_execute(hostname, port, username, password, command):
    try:
        # Create an SSH client
        ssh_client = paramiko.SSHClient()
        
        # Automatically add the server's host key (not recommended for production)
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # Connect to the remote server
        ssh_client.connect(hostname, port, username, password)
        
        # Execute the command
        stdin, stdout, stderr = ssh_client.exec_command(command)
        
        # Read the output from stdout and stderr
        output = stdout.read().decode()
        error = stderr.read().decode()
        
        # Print the output and error
        print("Output:")
        print(output)
        print("Error:")
        print(error)
        
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Close the SSH connection
        ssh_client.close()

# Function to create a database connection
def create_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
        print(f"Connected to SQLite database: {db_file}")
    except Error as e:
        print(f"Error: {e}")
    return conn

# Function to create the users table
def create_table(conn):
    create_table_sql = """
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL,
        password TEXT NOT NULL
    );
    """
    try:
        c = conn.cursor()
        c.execute(create_table_sql)
        print("Users table created successfully.")
    except Error as e:
        print(f"Error: {e}")

# Function to insert a new user into the users table
def insert_user(conn, username, password):
    insert_user_sql = """
    INSERT INTO users (username, password)
    VALUES (?, ?);
    """
    try:
        c = conn.cursor()
        c.execute(insert_user_sql, (username, password))
        conn.commit()
        print("User added successfully.")
    except Error as e:
        print(f"Error: {e}")

# Function to retrieve all users from the users table
def select_all_users(conn):
    select_all_users_sql = "SELECT * FROM users;"
    try:
        c = conn.cursor()
        c.execute(select_all_users_sql)
        rows = c.fetchall()
        for row in rows:
            print(row)
    except Error as e:
        print(f"Error: {e}")

# Main function
def main():
    database = "users.db"

    # Create a database connection
    conn = create_connection(database)

    if conn is not None:
        # Create users table
        create_table(conn)

        while True:
            print("\nOptions:")
            print("1. Add new user")
            print("2. View all users")
            print("3. Exit")

            choice = input("Enter your choice: ")

            if choice == '1':
                username = input("Enter username: ")
                password = getpass.getpass("Enter password: ")
                insert_user(conn, username, password)
            elif choice == '2':
                select_all_users(conn)
            elif choice == '3':
                break
            else:
                print("Invalid choice. Please try again.")

        # Close the database connection
        conn.close()
    else:
        print("Error! Cannot create the database connection.")

if __name__ == "__main__":
    main()

# Example usage
if __name__ == "__main__":
    hostname = "your_remote_host"  # Replace with the remote host's address
    port = 22  # Replace with the remote host's SSH port (default is 22)
    username = "your_username"  # Replace with your SSH username
    password = "your_password"  # Replace with your SSH password
    command = "ls -l"  # Replace with the command you want to execute
    
    ssh_connect_and_execute(hostname, port, username, password, command)

        
        # Simulate the execution result
    actual_result = "Simulated result"
        
    print(f"Expected result: {expected_result}")
    print(f"Actual result: {actual_result}")
        
    if actual_result == expected_result:
            print("Step passed")
    else:
            print("Step failed")

# Function to handle the "Run Test Case" button click
def run_test_case():
    jama_url = entry_jama_url.get()
    username = entry_username.get()
    api_token = entry_api_token.get()
    test_case_id = entry_test_case_id.get()
    
    if not jama_url or not username or not api_token or not test_case_id:
        messagebox.showerror("Error", "All fields are required")
        return
    
    test_case = fetch_test_case(jama_url, username, api_token, test_case_id)
    
    if test_case:
        test_steps = test_case['fields']['testCaseSteps']
        execute_test_steps(test_steps)

# Create the main window
root = tk.Tk()
root.title("JAMA Test Case Automation")

# Create and place the labels and entry widgets
tk.Label(root, text="JAMA URL:").grid(row=0, column=0, padx=10, pady=5)
entry_jama_url = tk.Entry(root, width=50)
entry_jama_url.grid(row=0, column=1, padx=10, pady=5)

tk.Label(root, text="Username:").grid(row=1, column=0, padx=10, pady=5)
entry_username = tk.Entry(root, width=50)
entry_username.grid(row=1, column=1, padx=10, pady=5)

tk.Label(root, text="API Token:").grid(row=2, column=0, padx=10, pady=5)
entry_api_token = tk.Entry(root, width=50, show="*")
entry_api_token.grid(row=2, column=1, padx=10, pady=5)

tk.Label(root, text="Test Case ID:").grid(row=3, column=0, padx=10, pady=5)
entry_test_case_id = tk.Entry(root, width=50)
entry_test_case_id.grid(row=3, column=1, padx=10, pady=5)

# Create and place the "Run Test Case" button
btn_run_test_case = tk.Button(root, text="Run Test Case", command=run_test_case)
btn_run_test_case.grid(row=4, column=0, columnspan=2, pady=10)

# Start the main event loop
root.mainloop()
